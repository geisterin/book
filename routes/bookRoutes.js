const express = require('express');
const router = express.Router();
const bookController = require('../controllers/bookController');
const bookValidation = require('../middlewares/bookValidation'); // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
const validate = require('../middlewares/validate');             // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
const authMiddleware = require('../middlewares/authMiddleware'); // üîê JWT –ø—Ä–æ–≤–µ—Ä–∫–∞
const isAdmin = require('../middlewares/isAdmin');               // üëë –†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

/**
 * @swagger
 * /books/search:
 *   get:
 *     summary: –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞–≤—Ç–æ—Ä—É –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 *     tags: [Books]
 *     parameters:
 *       - in: query
 *         name: title
 *         schema:
 *           type: string
 *         description: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
 *       - in: query
 *         name: author
 *         schema:
 *           type: string
 *         description: –ò–º—è –∞–≤—Ç–æ—Ä–∞
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *         description: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *     responses:
 *       200:
 *         description: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 books:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Book'
 *                 total:
 *                   type: integer
 *                   description: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
 *                 currentPage:
 *                   type: integer
 *                   description: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 *                 totalPages:
 *                   type: integer
 *                   description: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
 */
// üîì –û—Ç–∫—Ä—ã—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º
router.get('/search', bookController.search);
/**
 * @swagger
 * /books:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥
 *     tags: [Books]
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 books:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Book'
 *                 total:
 *                   type: integer
 *                   description: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
 *                 currentPage:
 *                   type: integer
 *                   description: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 *                 totalPages:
 *                   type: integer
 *                   description: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
 */

router.get('/', bookController.getAll);
router.get('/:id', bookController.getById);   // üëà –î–û–õ–ñ–ï–ù –ò–î–¢–ò –ü–û–°–õ–ï

// üîí –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞

/**
 * @swagger
 * /books:
 *   post:
 *     summary: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
 *     tags: [Books]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/BookInput'
 *     responses:
 *       201:
 *         description: –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Book'
 */

router.post('/', authMiddleware, isAdmin, bookValidation, validate, bookController.create);
router.put('/:id', authMiddleware, isAdmin, bookValidation, validate, bookController.update);
router.delete('/:id', authMiddleware, isAdmin, bookController.delete);

module.exports = router;
